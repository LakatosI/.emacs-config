Emacs configuration file

* General visual configs
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (tool-bar-mode -1)

  (setq tab-width 4)

  (defalias 'list-buffers 'ibuffer)

  (use-package ace-window
      :ensure t
      :init
      (progn
          (global-set-key [remap other-window] 'ace-window)
          (custom-set-faces
          '(aw-leading-char-face
              ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
          ))

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
  
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (load-theme 'solarized-light t))
#+END_SRC
* Environments and paths
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

#+END_SRC

** Ansi-term for Windows
   
#+BEGIN_SRC emacs-lisp
  (setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
  (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
#+END_SRC

#+RESULTS:
| comint-strip-ctrl-m | ansi-color-process-output | comint-postoutput-scroll-to-bottom | comint-watch-for-password-prompt |

  
** Recent files
   
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)

#+END_SRC

* Help packages and misc
#+BEGIN_SRC emacs-lisp

  (use-package try
    :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+END_SRC
  

  
* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))

#+END_SRC

* Org mode
  
#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
    :ensure t
    :config
    (progn
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

      ))
    (setq org-todo-keywords
    '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (setq org-log-done t)

    (setq org-directory "~/Dropbox/org")
    (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
    (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

;;; (setq initial-buffer-choice "~/Dropbox/org/home.org")
    (setq org-agenda-files (quote ("~/Dropbox/org/home.org")))

#+END_SRC

#+RESULTS:
| ~/Dropbox/org/home.org |

* Ivy mode

#+BEGIN_SRC emacs-lisp

  (use-package counsel
    :ensure t
    :config
    (progn
      (ivy-mode 1)))
#+END_SRC

#+RESULTS:
: t

  
* Erlang mode
#+BEGIN_SRC elisp
  (use-package erlang
    :ensure t
    :config
    (progn
      (require 'erlang-start)))
#+END_SRC

#+RESULTS:
: t

* Erlang mode
#+BEGIN_SRC emacs-lisp
  (defun my-erlang-mode-config ()
    "Custom bindings for erlang mode"
    (local-set-key (kbd "<f1>") 'erlang-compile)
    )

  (use-package erlang
    :ensure t
    :config
    (progn
      (add-hook 'erlang-mode-hook 'my-erlang-mode-config)
      ))
#+END_SRC

#+RESULTS:
: t
