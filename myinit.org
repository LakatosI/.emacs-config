Emacs configuration file

* General visual configs
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (tool-bar-mode -1)

  (setq tab-width 4)

  (defalias 'list-buffers 'ibuffer)

  (use-package ace-window
      :ensure t
      :init
      (progn
          (global-set-key [remap other-window] 'ace-window)
          (custom-set-faces
          '(aw-leading-char-face
              ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
          ))

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
  
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (load-theme 'solarized-light t))
#+END_SRC
* Environments and paths
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

#+END_SRC

#+RESULTS:
: t

* Help packages and misc
#+BEGIN_SRC emacs-lisp

  (use-package try
    :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+END_SRC
  
* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))

#+END_SRC

* Org mode
  
#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
    :ensure t
    :config
    (progn
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

      ))
    (setq org-todo-keywords
    '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

    (define-key global-map "\C-cl" 'org-store-link)
    (define-key global-map "\C-ca" 'org-agenda)
    (setq org-log-done t)

    (setq org-directory "~/Dropbox/org")
    (setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
    (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

;;; (setq initial-buffer-choice "~/Dropbox/org/home.org")
    (setq org-agenda-files (quote ("~/Dropbox/org/home.org")))

#+END_SRC

#+RESULTS:
| ~/Dropbox/org/home.org |

  
* Flycheck general

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

#+RESULTS:

  
* Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

#+RESULTS:

  
* Rust mode
#+BEGIN_SRC emacs-lisp

  (use-package rust-mode
    :ensure t
    :config
    (progn
      (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
      ))
#+END_SRC

#+RESULTS:
: t

** Flycheck mode
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :config
    (progn
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
      ))
#+END_SRC

#+RESULTS:
: t
   
** Racer mode
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :ensure t
    :init (progn
            (add-hook 'rust-mode-hook #'racer-mode)
            (add-hook 'racer-mode-hook #'eldoc-mode)))

#+END_SRC

** Company mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'racer-mode-hook #'company-mode)

  (require 'rust-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t)
#+END_SRC
   
