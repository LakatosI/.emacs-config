#+TITLE: Emacs configuration file
#+AUTHOR: Istvan Lakatos
#+PROPERTY: header-args :tangle yes

* About
My Emacs configuration files is written using Org mode, 
based on ideas taken from multiple sources:
  - https://huytd.github.io/emacs/emacs-from-scratch.html
  - https://github.com/larstvei/dot-emacs
    
** My [[file:init.el][init.el]] file
   
   In this initial configuration file I set up my external paths and
utility libraries that I reference in the rest of this Org config. 

* Documentation
  Set up additional info files
#+BEGIN_SRC emacs-lisp
(use-package info
  :config
  (add-to-list 'Info-additional-directory-list (ill-init-file "docs")))
#+END_SRC

* Memories
Projects, recent files, etc.
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-save-file (ill-local-file "recentf"))
  (setq recentf-max-menu-items 25)
  (recentf-mode 1))
#+END_SRC

* Vimification
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-C-i-jump nil)
  :config
  
  (evil-mode 1))

(use-package undo-tree
  :config
  (global-undo-tree-mode))

(use-package evil-escape
  :after evil
  :config
  (setq evil-escape-delay 0.3)
  (setq evil-escape-key-sequence "jk")
  (evil-escape-mode 1))
  
#+END_SRC
    

* Visuals
  #+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "mononoki-11"))
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 180))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
(setq show-paren-delay 0)
(show-paren-mode 1)

(load-theme 'solarized-light t)

(use-package which-key
  :config
  (which-key-mode))

(fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  
* Completions
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :commands ivy-mode
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (ivy-mode 1))

(use-package counsel)
(use-package swiper
  :config
  (global-set-key "\C-s" 'swiper))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs
	  (list
	   (ill-init-file "snippets")
	   ))
    (yas-global-mode 1))

#+END_SRC

* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :commands treemacs)

  (use-package treemacs-evil
    :ensure t
    :after (treemacs))
#+end_src

* Languages
  
** Company mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :commands company-complete
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    (define-key evil-insert-state-map (kbd "C-SPC") 'company-complete)
    :config
    (setq company-tooltip-align-annotations t)
    (setq company-minimum-prefix-length 1))
#+END_SRC
** Flycheck 
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
** LSP mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :after rust-mode
    :commands lsp
    :init
    (add-hook 'rust-mode-hook 'lsp))

  (use-package company-lsp
    :ensure t
    :after (:all company lsp)
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :ensure t
    :after (lsp flycheck)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+END_SRC
** Rust mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :commands rust-mode
    :mode "\\.rs\\'")

  (use-package flycheck-rust
    :ensure t
    :after (flycheck rust-mode)
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
