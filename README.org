#+TITLE: Emacs configuration file
#+AUTHOR: Istvan Lakatos
#+PROPERTY: header-args :tangle yes

* About
My Emacs configuration files is written using Org mode, 
based on ideas taken from multiple sources:
  - https://huytd.github.io/emacs/emacs-from-scratch.html
  - https://github.com/larstvei/dot-emacs
    
* Environments and paths
#+BEGIN_SRC emacs-lisp	
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (require 'exec-path-from-shell)

  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil))
#+END_SRC

** Ansi-term for Windows
   
#+BEGIN_SRC emacs-lisp
  (setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
  (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
#+END_SRC

** Recent files
   
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
#+END_SRC

* General visual configs
** Font and frame size
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "mononoki-11"))
  (add-to-list 'default-frame-alist '(height . 24))
  (add-to-list 'default-frame-alist '(width . 80))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  ;; Theme
  (use-package doom-themes
	:ensure t
	:config
	(load-theme 'doom-one t))
#+END_SRC

** Match titlebar color on MacOS

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+END_SRC

#+RESULTS:

** Misc
   Show matching parens

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

#+RESULTS:
: t

* Help packages and misc
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    (which-key-mode 1))
#+END_SRC

#+RESULTS:
  
** Misc settings
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)

  (use-package ace-window
      :ensure t
      :init
      (progn
          (global-set-key [remap other-window] 'ace-window)
          (custom-set-faces
          '(aw-leading-char-face
              ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
          ))

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

#+RESULTS:
: revert-buffer


* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))

#+END_SRC

** Evil-Escape mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :config
    (setq evil-escape-delay 0.3)
    (setq evil-escape-key-sequence "jk")
    (evil-escape-mode 1))
#+END_SRC

#+RESULTS:
: t

* Org mode
** Org bullets mode 

#+BEGIN_SRC emacs-lisp-no
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()
			       (org-bullets-mode 1))))
#+END_SRC
  
** Ox-Hugo 

#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox
    :config)
#+END_SRC

* Ivy, Councel, Swiper

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1))

  (use-package counsel
    :ensure t
    :config
    (counsel-mode 1))

  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))
#+END_SRC


* Syntax checking, completion, etc 
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode)
    )

  (use-package company
    :ensure t
    :config
    (global-company-mode)
    )

#+END_SRC

* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs
	'("~/.emacs.d/snippets"))
    (yas-global-mode 1))
#+END_SRC
* Rust mode
  #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure t
      :config
      (setq rust-format-on-save t))

    (use-package flycheck-rust
      :ensure t
      :after rust-mode
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

    (use-package lsp-mode
      :ensure t
      :hook (rust-mode . lsp)
      )

    (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode)
    (use-package company-lsp
      :ensure t
      :commands company-lsp)
  #+END_SRC
  
* TRAMP config
#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC
* Eshell
#+BEGIN_SRC emacs-lisp
  (eshell)
#+END_SRC

* HTML and CSS
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmmet-mode)
    (setq emmet-move-cursor-between-quotes t))
#+END_SRC
