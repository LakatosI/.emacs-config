#+TITLE: Emacs configuration file
#+AUTHOR: Istvan Lakatos
#+PROPERTY: header-args :tangle yes

* About
My Emacs configuration files is written using Org mode, 
based on ideas taken from multiple sources:
  - https://huytd.github.io/emacs/emacs-from-scratch.html
  - https://github.com/larstvei/dot-emacs
    
** My [[file:init.el][init.el]] file
   
   In this initial configuration file I set up my external paths and
utility libraries that I reference in the rest of this Org config. 

* Documentation
  Set up additional info files
#+BEGIN_SRC emacs-lisp
(use-package info
  :config
  (add-to-list 'Info-additional-directory-list (ill-init-file "docs")))
#+END_SRC

* Memories
Projects, recent files, etc.
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-save-file (ill-local-file "recentf"))
  (setq recentf-max-menu-items 25)
  (recentf-mode 1))
#+END_SRC

* Vimification
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-C-i-jump nil)
  :config
  
  (evil-mode 1))

(use-package undo-tree
  :config
  (global-undo-tree-mode))

(use-package evil-escape
  :after evil
  :config
  (setq evil-escape-delay 0.3)
  (setq evil-escape-key-sequence "jk")
  (evil-escape-mode 1))
  
#+END_SRC
    
* Keybindings
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    ;; Allow C-h to trigger which-key before it is done automatically
    (setq which-key-show-early-on-C-h t)
    ;; make sure which-key doesn't show normally but refreshes quickly after it is
    ;; triggered.
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05)
    (which-key-mode))

  (use-package general
    :config
    (general-define-key
     "C-s" 'swiper
     "M-x" 'counsel-M-x)

    (general-define-key
     :states '(normal visual insert emacs)
     :prefix "SPC"
     :non-normal-prefix "C-SPC"

     ;; Simple commands
     "SPC" '(avy-goto-char-timer :which-key "go to sequence")
     
     ;; Projects
     "p" '(projectile-command-map :which-key "Projectile")

     ;;File operations
     "f" '(:ignore t :which-key "Files") 
     "ff" '(counsel-find-file :which-key "Find file")
     "fr" '(counsel-recentf :which-key "Search recent files")
     "ft" '(treemacs :which-key "Treemacs")
     
     ;;Windows
     "w" '(:ignore t :which-key "Windows") 
     "ww" '(ace-window :which-key "Switch window")
     ))
#+END_SRC

#+RESULTS:
: t

* Visuals
  #+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font . "mononoki-11"))
(add-to-list 'default-frame-alist '(height . 40))
(add-to-list 'default-frame-alist '(width . 180))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(setq ns-use-proxy-icon  nil)
(setq frame-title-format nil)
(setq show-paren-delay 0)
(show-paren-mode 1)

(use-package solarized-theme
  :config (load-theme 'solarized-dark t))

(use-package which-key
  :config
  (which-key-mode))

(fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

* Windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :commands ace-window)
#+END_SRC
* Navigation  
#+BEGIN_SRC emacs-lisp
  (use-package avy)

  (use-package treemacs
    :commands treemacs)

  (use-package treemacs-evil
    :after (treemacs))

  (use-package treemacs-projectile
    :after (treemacs))
#+END_SRC

#+RESULTS:

* Completions
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :commands ivy-mode
  
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1))

  (use-package counsel
    :config (counsel-mode))
  (use-package swiper
      :commands (swiper))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))


  (use-package company 
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda ()
				     (company-mode-on))))

  (use-package lsp-mode :commands lsp)

  (use-package lsp-ivy
    :after (lsp-mode))

  (use-package lsp-ui
    :after (lsp-mode)
    :commands lsp-ui-mode)

  (use-package company-lsp
    :commands company-lsp
    :config
    (push 'company-lsp company-backends))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs
	  (list
	   (ill-init-file "snippets")
	   ))
    (yas-global-mode 1))

#+END_SRC

* Projects
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-enable-idle-timer t)
    (setq projectile-idle-timer-seconds 5)
    (setq projectile-indexing-method 'alien)
    :config
    (setq projectile-enable-caching t)
    (setq projectile-completion-system 'ivy)
    (setq projectile-idle-timer-hook nil)
    (add-hook 'projectile-idle-timer-hook #'ill/bazel-gen-compile-commands)
    (setq projectile-enable-idle-timer t))

  (use-package counsel-projectile
    :after (counsel projectile)
    :config
    (counsel-projectile-mode))

#+END_SRC

#+RESULTS:
: t

* Languages
  #+BEGIN_SRC emacs-lisp
  #+END_SRC
  #+BEGIN_SRC emacs-lisp-nope
    (use-package ccls
      :config
      (setq lsp-prefer-flymake nil)
      (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
      :hook ((c-mode c++-mode objc-mode) .
	     (lambda () (require 'ccls) (lsp))))
  #+END_SRC
  
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode)
#+END_SRC
