#+TITLE: Emacs configuration file
#+AUTHOR: Istvan Lakatos
#+PROPERTY: header-args :tangle yes


* About
My Emacs configuration files is written using Org mode, 
based on ideas taken from multiple sources:
  - https://huytd.github.io/emacs/emacs-from-scratch.html
  - https://github.com/larstvei/dot-emacs
    
** Meta
When this configuration is loaded for the first time, an initial *init.el* file is loaded, containing

#+BEGIN_SRC emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.
;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))

#+END_SRC

This overwrites *init.el* with the tangled version of this Org file. In order for this new *init.el* to
not polute git status calls, one can call 
#+BEGIN_SRC bash :tangle no
  git update-index --assume-unchanged init.el
#+END_SRC

Tracking can be reenabled at a later time with:
#+BEGIN_SRC bash :tangle no
  git update-index --no-assume-unchanged init.el
#+END_SRC

** Reloading settings
   
A hook can be installed to automatically tangle and byte-compile this Org file. 
#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
	(org-babel-tangle)
	(load-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

* Basic setup
  We set up here MELPA and get *use-package* for later use.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
			   ("gnu"   . "http://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)

  ;; Bootstrap 'use-package'

  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
#+END_SRC

* Environments and paths
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
  (require 'exec-path-from-shell)

  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil))
#+END_SRC

** Ansi-term for Windows
   
#+BEGIN_SRC emacs-lisp
  (setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
  (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
#+END_SRC

** Recent files
   
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)

#+END_SRC

* General visual configs
** Minimal UI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)
#+END_SRC

#+RESULTS:

** Font and frame size
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "mononoki-12"))
  (add-to-list 'default-frame-alist '(height . 24))
  (add-to-list 'default-frame-alist '(width . 80))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  ;; Theme
  (use-package doom-themes
	:ensure t
	:config
	(load-theme 'doom-one t))
#+END_SRC

** Match titlebar color on MacOS

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+END_SRC

#+RESULTS:

** Misc

   Show matching parens
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

#+RESULTS:
: t

* Help packages and misc
#+BEGIN_SRC emacs-lisp

   (use-package try
	 :ensure t)

  (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    (which-key-mode 1))
  (require 'which-key)


   (use-package sudo-edit
     :ensure t)
#+END_SRC

#+RESULTS:
  
** Misc settings
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)

  (use-package ace-window
      :ensure t
      :init
      (progn
          (global-set-key [remap other-window] 'ace-window)
          (custom-set-faces
          '(aw-leading-char-face
              ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
          ))

  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

#+RESULTS:
: revert-buffer


* Evil mode
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-i-jump nil)
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))

#+END_SRC

** Evil-Escape mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :ensure t
    :init
    (setq-default evil-escape-key-sequence "jk")
    :config
    (evil-escape-mode 1))
  (require 'evil-escape)
#+END_SRC

#+RESULTS:
: t

* Org mode
  
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t)

#+END_SRC
  
** Org bullets mode 
#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()
			       (org-bullets-mode 1))))
  (require 'org-bullets)
#+END_SRC
  
** Configs
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))

  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)

  (setq org-directory "~/org")
  (setq org-mobile-inbox-for-pull "~/org/flagged.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")

  ;;; (setq initial-buffer-choice "~/Dropbox/org/home.org")
  (setq org-agenda-files (quote ("~/org/home.org")))

#+END_SRC

** Ox-Hugo 

#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox
    :config)
  (require 'ox-hugo)

#+END_SRC

* Ivy, Councel, Swiper

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))
  (require 'ivy)

  (use-package counsel
    :ensure t
    :config
    (counsel-mode 1))
  (require 'counsel)

  (use-package swiper
    :ensure t
    :config
    (global-set-key "\C-s" 'swiper))
#+END_SRC

* Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode))
  (require 'company)
#+END_SRC

* Projectile mode

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  (require 'projectile)
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
